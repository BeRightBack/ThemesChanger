<!DOCTYPE html>
<html lang="en">
<head>
    @{
        var bootswatchTheme = "quartz"; // Default theme
        var storedTheme = Context.Request.Cookies["bootswatchTheme"];
        var bootswatchPath = Url.Content($"~/lib/bootstrap/dist/css/bootstrap.min.css");
        if (!string.IsNullOrEmpty(storedTheme))
        {
            bootswatchTheme = storedTheme;
        }
        if (bootswatchTheme=="default")
        {
            bootswatchPath = Url.Content($"~/lib/bootstrap/dist/css/bootstrap.min.css");
        }
        else { bootswatchPath = Url.Content($"~/lib/Bootswatch/{bootswatchTheme}/bootstrap.min.css"); }

    }
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - ThemesChanger</title>
    <link rel="stylesheet" href="@bootswatchPath" />

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/ThemesChanger.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">Navbar</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor04" aria-controls="navbarColor04" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarColor04">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link active" href="/">
                                Home
                                <span class="visually-hidden">(current)</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Features</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Pricing</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">About</a>
                        </li>
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Dropdown</a>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="#">Action</a>
                                <a class="dropdown-item" href="#">Another action</a>
                                <a class="dropdown-item" href="#">Something else here</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="#">Separated link</a>
                            </div>
                        </li>
                    </ul>
                    <form class="d-flex">
                        <input class="form-control me-sm-2" type="search" placeholder="Search">
                        <button class="btn btn-secondary my-2 my-sm-0" type="submit">Search</button>
                    </form>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <div class="theme_group">
            <label for="theme">Choose a theme</label>
            <select name="theme" id="themes">
                <option value="default">Default</option>
                <option value="cerulean">Cerulean</option>
                <option value="cosmo">Cosmo</option>
                <option value="cyborg">Cyborg</option>
                <option value="darkly">Darkly</option>
                <option value="flatly">Flatly</option>
                <option value="journal">Journal</option>
                <option value="litera">Litera</option>
                <option value="lumen">Lumen</option>
                <option value="lux">Lux</option>
                <option value="materia">Materia</option>
                <option value="minty">Minty</option>
                <option value="morph">Morph</option>
                <option value="pulse">Pulse</option>
                <option value="quartz">Quartz</option>
                <option value="sandstone">Sandstone</option>
                <option value="simplex">Simplex</option>
                <option value="sketchy">Sketchy</option>
                <option value="slate">Slate</option>
                <option value="solar">Solar</option>
                <option value="spacelab">Spacelab</option>
                <option value="superhero">Superhero</option>
                <option value="united">United</option>
                <option value="vapor">Vapor</option>
                <option value="yeti">Yeti</option>
                <option value="zephyr">Zephyr</option>
            </select>
        </div>

        <!-- Bootstrap 5 switch -->
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="darkModeSwitch" checked>
            <label class="form-check-label" for="darkModeSwitch">Dark Mode</label>
        </div>
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - ThemesChanger - <a asp-area="" asp-page="/Privacy">Privacy</a>
        </div>
    </footer>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        function setCookie(name, value, days) {
            const d = new Date();
            d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
            const expires = "expires=" + d.toUTCString();
            document.cookie = name + "=" + value + ";" + expires + ";path=/";
        }

        function getCookie(name) {
            const cname = name + "=";
            const decodedCookie = decodeURIComponent(document.cookie);
            const ca = decodedCookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(cname) == 0) {
                    return c.substring(cname.length, c.length);
                }
            }
            return "";
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            const htmlElement = document.documentElement;
            const switchElement = document.getElementById('darkModeSwitch');

            // Set the default theme to dark if no setting is found in cookies
            const currentTheme = getCookie('bsTheme') || 'dark';
            htmlElement.setAttribute('data-bs-theme', currentTheme);
            switchElement.checked = currentTheme === 'dark';

            switchElement.addEventListener('change', function () {
                if (this.checked) {
                    htmlElement.setAttribute('data-bs-theme', 'dark');
                    setCookie('bsTheme', 'dark', 365);
                } else {
                    htmlElement.setAttribute('data-bs-theme', 'light');
                    setCookie('bsTheme', 'light', 365);
                }
            });

            // Ensure themeColor is an element
            const themeColorElement = document.getElementById('themes');
            if (themeColorElement) {
                // Set the selected theme from cookies
                const storedTheme = getCookie('bootswatchTheme');
                if (storedTheme) {
                    themeColorElement.value = storedTheme;
                    if (themeColorElement.value == "default")
                    {
                        const link = document.querySelector("link[rel='stylesheet']");
                        link.href = `/lib/bootstrap/dist/css/bootstrap.min.css`;
                    }
                    else
                    {
                        const link = document.querySelector("link[rel='stylesheet']");
                        link.href = `/lib/Bootswatch/${storedTheme}/bootstrap.min.css`;
                    }
                    //const link = document.querySelector("link[rel='stylesheet']");
                    //link.href = `/lib/Bootswatch/${storedTheme}/bootstrap.min.css`;
                }

                themeColorElement.addEventListener('change', function () {
                    const theme = themeColorElement.value;
                    const link = document.querySelector("link[rel='stylesheet']");
                    if (theme === 'default') {
                        link.href = '/lib/bootstrap/dist/css/bootstrap.min.css'
                        bootswatchPath = "/lib/bootstrap/dist/css/bootstrap.min.css"
                    }else {
                        link.href = `/lib/Bootswatch/${theme}/bootstrap.min.css`;
                    }
                    setCookie('bootswatchTheme', theme, 365);
                });
            } else {
                console.error('Element with ID themes not found');
            }
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
